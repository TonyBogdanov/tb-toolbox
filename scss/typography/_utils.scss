// Global base size value in pixels
$base:                16 !default;

// Define a base size (global) in pixels
@mixin base($value) {
  $base:              remove-unit($value) !global;

  html {
    font-size:        set-unit($base, px) !important;
  }
}

// Because of the nature of most graphic editors, the world still revolves around pixels
// Thus, it's much easier to "think" in pixels when sizing stuff, but still be able to use scalable units
// This function allows to convert a value from pixels to rems based on the globally defined baseline size
@function px($value) {
  @return set-unit(remove-unit($value) / $base, rem);
}

// It's rather time consuming to write all anchor states when defining selectors
@mixin anchorify($selector, $default: true, $link: true, $visited: true, $hover: true, $active: true, $focus: true) {
  $sub-selector: '';

  @if $default {
    $sub-selector: $sub-selector + '&, ';
  }
  @if $link {
    $sub-selector: $sub-selector + '&:link, ';
  }
  @if $visited {
    $sub-selector: $sub-selector + '&:visited, ';
  }
  @if $hover {
    $sub-selector: $sub-selector + '&:hover, ';
  }
  @if $active {
    $sub-selector: $sub-selector + '&:active, ';
  }
  @if $focus {
    $sub-selector: $sub-selector + '&:focus, ';
  }

  $sub-selector: str_slice($sub-selector, 0, str_length($sub-selector) - 2);

  @if null == $selector {
    #{$sub-selector} {
      @content;
    }
  } @else {
    #{$selector} {
      #{$sub-selector} {
        @content;
      }
    }
  }
}
@mixin anchor($selector...) {
  @if 0 == length($selector) {
    @include anchorify(null) {
      @content;
    }
  }

  @if 'arglist' == type_of($selector) {
    @each $i in $selector {
      @include anchorify($i) {
        @content;
      }
    }
  } @else {
    @include anchorify($selector) {
      @content;
    }
  }
}
@mixin anchor-hover($selector...) {
  @if 0 == length($selector) {
    @include anchorify(null, $default: false, $link: false, $visited: false, $hover: false, $focus: false) {
      @content;
    }
  }

  @if 'arglist' == type_of($selector) {
    @each $i in $selector {
      @include anchorify($i, $default: false, $link: false, $visited: false, $hover: false, $focus: false) {
        @content;
      }
    }
  } @else {
    @include anchorify($selector, $default: false, $link: false, $visited: false, $hover: false, $focus: false) {
      @content;
    }
  }
}
@mixin anchor-active($selector...) {
  @if 0 == length($selector) {
    @include anchorify(null, $default: false, $link: false, $visited: false, $active: false, $focus: false) {
      @content;
    }
  }

  @if 'arglist' == type_of($selector) {
    @each $i in $selector {
      @include anchorify($i, $default: false, $link: false, $visited: false, $active: false, $focus: false) {
        @content;
      }
    }
  } @else {
    @include anchorify($selector, $default: false, $link: false, $visited: false, $active: false, $focus: false) {
      @content;
    }
  }
}
@mixin anchor-focus($selector...) {
  @if 0 == length($selector) {
    @include anchorify(null, $default: false, $link: false, $visited: false, $hover: false, $active: false) {
      @content;
    }
  }

  @if 'arglist' == type_of($selector) {
    @each $i in $selector {
      @include anchorify($i, $default: false, $link: false, $visited: false, $hover: false, $active: false) {
        @content;
      }
    }
  } @else {
    @include anchorify($selector, $default: false, $link: false, $visited: false, $hover: false, $active: false) {
      @content;
    }
  }
}